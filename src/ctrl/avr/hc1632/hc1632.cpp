/*
 * hc1632.cpp
 *
 * Created: 28/02/2019 21:21:38
 * Author : toff
 */ 

#include <avr/io.h>
#include <avr/interrupt.h>
#include <string.h>
#include <util/delay.h>

#define TEMPO 1
#define NB_MATRIX 10
#define NB_POINT  48

#define DATA_PIN  0
#define WRITE_PIN 1
#define READ_PIN  2
uint8_t decalage[] = { 4, 5, 6, 7, 0, 1, 2, 3, 4, 5 };
void hc1632_write_output(int8_t matrice, int8_t valeur)
{
  if (matrice < 4)
  {
    PORTB = 0x3F;
    PORTD = 0xF0 & ~((valeur?1:0) << decalage[matrice]);
  }
  else
  {
    PORTB = 0x3F & ~((valeur?1:0) << decalage[matrice]);
    PORTD = 0xF0;
  }
  _delay_us(TEMPO);;
}


void hc1632_write_bit(int8_t valeur)
{
  PORTC = 0x03 & ~(1<<WRITE_PIN);
  PORTC = (PORTC & ~(1<<DATA_PIN)) | ((valeur?1:0) << DATA_PIN);
  _delay_us(TEMPO);;
  PORTC = PORTC | (1<<WRITE_PIN);
  _delay_us(TEMPO);;
}


void hc1632_write_sys(int8_t matrice, int8_t on)
{
  hc1632_write_output(matrice, 1);
  
  hc1632_write_bit(1);
  hc1632_write_bit(0);
  hc1632_write_bit(0);
  
  hc1632_write_bit(0);
  hc1632_write_bit(0);
  hc1632_write_bit(0);
  hc1632_write_bit(0);
  
  hc1632_write_bit(0);
  hc1632_write_bit(0);
  hc1632_write_bit(0);
  hc1632_write_bit(on);
  
  hc1632_write_bit(0);
  
  hc1632_write_output(matrice, 0);
}


void hc1632_write_com_option(int8_t matrice, int8_t config)
{
  hc1632_write_output(matrice, 1);

  hc1632_write_bit(1);
  hc1632_write_bit(0);
  hc1632_write_bit(0);

  hc1632_write_bit(0);
  hc1632_write_bit(0);
  hc1632_write_bit(1);
  hc1632_write_bit(0);

  hc1632_write_bit(config & 0x02); // a
  hc1632_write_bit(config & 0x01); // b
  hc1632_write_bit(0);
  hc1632_write_bit(0);

  hc1632_write_bit(0);

  hc1632_write_output(matrice, 0);
}


void hc1632_write_mode(int8_t matrice, int8_t mode)
{
  hc1632_write_output(matrice, 1);
  
  hc1632_write_bit(1);
  hc1632_write_bit(0);
  hc1632_write_bit(0);
  
  hc1632_write_bit(0);
  hc1632_write_bit(0);
  hc1632_write_bit(0);
  hc1632_write_bit(1);
  
  hc1632_write_bit(mode & 0x02);
  hc1632_write_bit(mode & 0x01);
  hc1632_write_bit(0);
  hc1632_write_bit(0);
  
  hc1632_write_bit(0);
  
  hc1632_write_output(matrice, 0);
}


void hc1632_write_led(int8_t matrice, int8_t on)
{
  hc1632_write_output(matrice, 1);
  
  hc1632_write_bit(1);
  hc1632_write_bit(0);
  hc1632_write_bit(0);
  
  hc1632_write_bit(0);
  hc1632_write_bit(0);
  hc1632_write_bit(0);
  hc1632_write_bit(0);
  
  hc1632_write_bit(0);
  hc1632_write_bit(0);
  hc1632_write_bit(1);
  hc1632_write_bit(on);
  
  hc1632_write_bit(0);
  
  hc1632_write_output(matrice, 0);
}


void hc1632_write_blink(int8_t matrice, int8_t on)
{
  hc1632_write_output(matrice, 1);
  
  hc1632_write_bit(1);
  hc1632_write_bit(0);
  hc1632_write_bit(0);
  
  hc1632_write_bit(0);
  hc1632_write_bit(0);
  hc1632_write_bit(0);
  hc1632_write_bit(0);
  
  hc1632_write_bit(1);
  hc1632_write_bit(0);
  hc1632_write_bit(0);
  hc1632_write_bit(on);
  
  hc1632_write_bit(0);
  
  hc1632_write_output(matrice, 0);
}


void hc1632_write_led_pwm(int8_t matrice, int8_t intensity)
{
  hc1632_write_output(matrice, 1);
  
  hc1632_write_bit(1);
  hc1632_write_bit(0);
  hc1632_write_bit(0);
  
  hc1632_write_bit(1);
  hc1632_write_bit(0);
  hc1632_write_bit(1);
  hc1632_write_bit(0);
  
  hc1632_write_bit(intensity & 0x08);
  hc1632_write_bit(intensity & 0x04);
  hc1632_write_bit(intensity & 0x02);
  hc1632_write_bit(intensity & 0x01);
  
  hc1632_write_bit(0);
  
  hc1632_write_output(matrice, 0);
}


void hc1632_write_led_buffer(int8_t matrice, uint8_t * buffer, uint8_t length)
{
  hc1632_write_output(matrice, 1);
  
  hc1632_write_bit(1);
  hc1632_write_bit(0);
  hc1632_write_bit(1);
  
  /* address */
  hc1632_write_bit(0);
  hc1632_write_bit(0);
  hc1632_write_bit(0);
  hc1632_write_bit(0);
  hc1632_write_bit(0);
  hc1632_write_bit(0);
  hc1632_write_bit(0);

  /* data */
  for (uint8_t j=0; j<length; ++j)
  {
    for (uint8_t i=0; i<8; ++i)
    {
      hc1632_write_bit(buffer[j] & (1<<i));
    }
  }

  hc1632_write_output(matrice, 0);
}
/* 01/02/04/08/10/20/40/80 */
uint8_t chiffre[10][48] ={
  { 0x00, 0x00, 0x00, 0x00, 0xFC, 0x3F, 0xFC, 0x3F, 0xFC, 0x3F, 0xFC, 0x3F, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0xFC, 0x3F, 0xFC, 0x3F, 0xFC, 0x3F, 0xFC, 0x3F, 0x00, 0x00, 0x00, 0x00 }
, { 0x00, 0x00, 0x00, 0x00, 0x00, 0x3C, 0x00, 0x3C, 0x00, 0x3C, 0x00, 0x3C, 0x00, 0x3C, 0x00, 0x3C, 0x00, 0x3C, 0x00, 0x3C, 0x00, 0x3C, 0x00, 0x3C, 0x00, 0x3C, 0x00, 0x3C, 0x00, 0x3C, 0x00, 0x3C, 0x00, 0x3C, 0x00, 0x3C, 0x00, 0x3C, 0x00, 0x3C, 0x00, 0x3C, 0x00, 0x3C, 0x00, 0x00, 0x00, 0x00 }
, { 0x00, 0x00, 0x00, 0x00, 0xFC, 0x3F, 0xFC, 0x3F, 0xFC, 0x3F, 0xFC, 0x3F, 0x00, 0x3C, 0x00, 0x3C, 0x00, 0x3C, 0x00, 0x3C, 0xFC, 0x3F, 0xFC, 0x3F, 0xFC, 0x3F, 0xFC, 0x3F, 0x3C, 0x00, 0x3C, 0x00, 0x3C, 0x00, 0x3C, 0x00, 0xFC, 0x3F, 0xFC, 0x3F, 0xFC, 0x3F, 0xFC, 0x3F, 0x00, 0x00, 0x00, 0x00 }
, { 0x00, 0x00, 0x00, 0x00, 0xFC, 0x3F, 0xFC, 0x3F, 0xFC, 0x3F, 0xFC, 0x3F, 0x00, 0x3C, 0x00, 0x3C, 0x00, 0x3C, 0x00, 0x3C, 0xC0, 0x3F, 0xC0, 0x3F, 0xC0, 0x3F, 0xC0, 0x3F, 0x00, 0x3C, 0x00, 0x3C, 0x00, 0x3C, 0x00, 0x3C, 0xFC, 0x3F, 0xFC, 0x3F, 0xFC, 0x3F, 0xFC, 0x3F, 0x00, 0x00, 0x00, 0x00 }
, { 0x00, 0x00, 0x00, 0x00, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0xFC, 0x3F, 0xFC, 0x3F, 0xFC, 0x3F, 0xFC, 0x3F, 0x00, 0x3C, 0x00, 0x3C, 0x00, 0x3C, 0x00, 0x3C, 0x00, 0x3C, 0x00, 0x3C, 0x00, 0x3C, 0x00, 0x3C, 0x00, 0x00, 0x00, 0x00 }
, { 0x00, 0x00, 0x00, 0x00, 0xFC, 0x3F, 0xFC, 0x3F, 0xFC, 0x3F, 0xFC, 0x3F, 0x3C, 0x00, 0x3C, 0x00, 0x3C, 0x00, 0x3C, 0x00, 0xFC, 0x3F, 0xFC, 0x3F, 0xFC, 0x3F, 0xFC, 0x3F, 0x00, 0x3C, 0x00, 0x3C, 0x00, 0x3C, 0x00, 0x3C, 0xFC, 0x3F, 0xFC, 0x3F, 0xFC, 0x3F, 0xFC, 0x3F, 0x00, 0x00, 0x00, 0x00 }
, { 0x00, 0x00, 0x00, 0x00, 0xFC, 0x3F, 0xFC, 0x3F, 0xFC, 0x3F, 0xFC, 0x3F, 0x3C, 0x00, 0x3C, 0x00, 0x3C, 0x00, 0x3C, 0x00, 0xFC, 0x3F, 0xFC, 0x3F, 0xFC, 0x3F, 0xFC, 0x3F, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0xFC, 0x3F, 0xFC, 0x3F, 0xFC, 0x3F, 0xFC, 0x3F, 0x00, 0x00, 0x00, 0x00 }
, { 0x00, 0x00, 0x00, 0x00, 0xFC, 0x3F, 0xFC, 0x3F, 0xFC, 0x3F, 0xFC, 0x3F, 0x00, 0x3C, 0x00, 0x3C, 0x00, 0x3C, 0x00, 0x3C, 0x00, 0x3C, 0x00, 0x3C, 0x00, 0x3C, 0x00, 0x3C, 0x00, 0x3C, 0x00, 0x3C, 0x00, 0x3C, 0x00, 0x3C, 0x00, 0x3C, 0x00, 0x3C, 0x00, 0x3C, 0x00, 0x3C, 0x00, 0x00, 0x00, 0x00 }
, { 0x00, 0x00, 0x00, 0x00, 0xFC, 0x3F, 0xFC, 0x3F, 0xFC, 0x3F, 0xFC, 0x3F, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0xFC, 0x3F, 0xFC, 0x3F, 0xFC, 0x3F, 0xFC, 0x3F, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0xFC, 0x3F, 0xFC, 0x3F, 0xFC, 0x3F, 0xFC, 0x3F, 0x00, 0x00, 0x00, 0x00 }
, { 0x00, 0x00, 0x00, 0x00, 0xFC, 0x3F, 0xFC, 0x3F, 0xFC, 0x3F, 0xFC, 0x3F, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0xFC, 0x3F, 0xFC, 0x3F, 0xFC, 0x3F, 0xFC, 0x3F, 0x00, 0x3C, 0x00, 0x3C, 0x00, 0x3C, 0x00, 0x3C, 0xFC, 0x3F, 0xFC, 0x3F, 0xFC, 0x3F, 0xFC, 0x3F, 0x00, 0x00, 0x00, 0x00 }
};
uint8_t tiret[]    = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFC, 0x3F, 0xFC, 0x3F, 0xFC, 0x3F, 0xFC, 0x3F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
uint8_t terrain[5][48] = {
  { 0xFF, 0xFF, 0x09, 0x00, 0x09, 0x00, 0xFF, 0xFF, 0x09, 0x00, 0x09, 0x00, 0x09, 0x00, 0x09, 0x00, 0x09, 0x00, 0x09, 0x00, 0x09, 0x00, 0x09, 0x00, 0xFF, 0xFF, 0x09, 0x00, 0x09, 0x00, 0x09, 0x00, 0x09, 0x00, 0x09, 0x00, 0x09, 0x00, 0x09, 0x00, 0x09, 0x00, 0xFF, 0xFF, 0x09, 0x00, 0xFF, 0xFF }
, { 0xFF, 0xFF, 0x00, 0x80, 0x00, 0x80, 0xFF, 0xFF, 0x00, 0x80, 0x00, 0x80, 0x00, 0x80, 0x00, 0x80, 0x00, 0x80, 0x00, 0x80, 0x00, 0x80, 0x00, 0x80, 0xFF, 0xFF, 0x00, 0x80, 0x00, 0x80, 0x00, 0x80, 0x00, 0x80, 0x00, 0x80, 0x00, 0x80, 0x00, 0x80, 0x00, 0x80, 0xFF, 0xFF, 0x00, 0x80, 0xFF, 0xFF }
, { 0xFF, 0xFF, 0x80, 0x01, 0x80, 0x01, 0xFF, 0xFF, 0x80, 0x01, 0x80, 0x01, 0x80, 0x01, 0x80, 0x01, 0x80, 0x01, 0x80, 0x01, 0x80, 0x01, 0x80, 0x01, 0xFF, 0xFF, 0x80, 0x01, 0x80, 0x01, 0x80, 0x01, 0x80, 0x01, 0x80, 0x01, 0x80, 0x01, 0x80, 0x01, 0x80, 0x01, 0xFF, 0xFF, 0x80, 0x01, 0xFF, 0xFF }
, { 0xFF, 0xFF, 0x01, 0x00, 0x01, 0x00, 0xFF, 0xFF, 0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0xFF, 0xFF, 0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0xFF, 0xFF, 0x01, 0x00, 0xFF, 0xFF }
, { 0xFF, 0xFF, 0x00, 0x90, 0x00, 0x90, 0xFF, 0xFF, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0xFF, 0xFF, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0xFF, 0xFF, 0x00, 0x90, 0xFF, 0xFF }
};

void setup()
{
  DDRB = 0x3F;
  DDRC = 0x03;
  DDRD = 0xF0;
  
  PORTB = 0x3F;
  PORTC = 0x03;
  PORTD = 0xF0;
  _delay_ms(10);

  for (uint8_t i=0; i<NB_MATRIX; ++i)
  {
    // SYS DIS
    hc1632_write_sys(i, 0x00);
    _delay_ms(10);
    
    // COM OPTION
    hc1632_write_com_option(i, 1);
    _delay_ms(10);
    
    // MASTER MODE
    hc1632_write_mode(i, (i==0) ? 2 : 0);
    _delay_ms(10);
    
    // SYS ON
    hc1632_write_sys(i, 0x01);
    _delay_ms(10);
    
    // LED ON
    hc1632_write_led(i, 0x01);
    _delay_ms(10);
    hc1632_write_blink(i, 0x00);
    _delay_ms(10);
    hc1632_write_led_pwm(i, 0x02);
    _delay_ms(10);
  }

  hc1632_write_led_buffer(0, chiffre[0], NB_POINT);
  hc1632_write_led_buffer(2, chiffre[0], NB_POINT);
  hc1632_write_led_buffer(4, tiret, NB_POINT);
  hc1632_write_led_buffer(6, chiffre[0], NB_POINT);
  hc1632_write_led_buffer(8, chiffre[0], NB_POINT);

  hc1632_write_led_buffer(1, terrain[0], NB_POINT);
  hc1632_write_led_buffer(3, terrain[1], NB_POINT);
  hc1632_write_led_buffer(5, terrain[2], NB_POINT);
  hc1632_write_led_buffer(7, terrain[3], NB_POINT);
  hc1632_write_led_buffer(9, terrain[4], NB_POINT);
}

void loop()
{
  /*
  for (uint8_t i=0; i<8; ++i)
    {
        buffer[0] = 1<<i;
        hc1632_write_led_buffer(0, buffer, NB_POINT);
      _delay_ms(10);
    }
    for (uint8_t i=0; i<8; ++i)
    {
        buffer[0] = 1<<(7-i);
        hc1632_write_led_buffer(0, buffer, NB_POINT);
      _delay_ms(10);
    }
    */
}