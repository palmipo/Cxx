/*
 * toto.cpp
 *
 * Created: 19/01/2019 16:37:28
 * Author : toff
 */ 

#include <avr/io.h>
#include <avr/interrupt.h>
#include "ws2812b.h"

// Generated by delay loop calculator
// at http://www.bretmulvey.com/avrdelay.html
// Delay 1 cycles
// 125 ns at 8.0 MHz
// 20 inst. clocks per bit: HHHHHxxxxxxxxLLLLLLL

void affiche(uint8_t *pixels)
{
	volatile uint8_t *ptr = pixels;
	volatile uint8_t b = *ptr++;
	cli();

	asm (
	"        ldi  r19, 0xFF"			"\n\t"
	"        ldi  r20, 0"				"\n\t"

	"        out %[port], r20"			"\n\t"
	"        ldi  r18, 255"				"\n\t"
	"RAZ:    dec  r18"				"\n\t"
//	"        ldi  r17, 255"				"\n\t"
//	"RAZ2:    dec  r17"				"\n\t"
//	"        brne RAZ2"				"\n\t"
	"        brne RAZ"				"\n\t"

	"	ldi  r17, %[nbled]"			"\n\t"
	"led:	ldi  r16, %[nbbit]"			"\n\t"

	"loop:	out %[port], r19"			"\n\t"
	"       nop"					"\n\t"
	"       nop"					"\n\t"
	"       nop"					"\n\t"
//	"       nop"					"\n\t"
//	"       nop"					"\n\t"
//	"       nop"					"\n\t"
//	"       nop"					"\n\t"

	"       out %[port], %[byte]"			"\n\t"
	"       nop"					"\n\t"
	"       nop"					"\n\t"
	"       nop"					"\n\t"
	"       nop"					"\n\t"
	"       nop"					"\n\t"
	"       nop"					"\n\t"
//	"       nop"					"\n\t"

	"       out %[port], r20"			"\n\t"
	"       nop"					"\n\t"
	"       nop"					"\n\t"
	"       nop"					"\n\t"
	"       nop"					"\n\t"
	"       nop"					"\n\t"
//	"       nop"					"\n\t"
//	"       nop"					"\n\t"

   	"	ld   %[byte] , %a[ptr]+"		"\n\t"
	"       dec  r16"				"\n\t"
	"       brne loop"				"\n\t"
	"       dec  r17"				"\n\t"
	"       brne led"				"\n\t"
	: [byte] "+r" (b)
	: [port] "I" (_SFR_IO_ADDR(PORTB))
	, [ptr] "e" (ptr)
	, [nbled] "M" (NB_LED)
	, [nbbit] "M" (NB_BIT)
	);
	
	sei();
}

void setPixel(uint8_t voie, uint8_t index, uint8_t red, uint8_t green, uint8_t blue, uint8_t *pixels)
{
	int8_t i;
	for (i=0; i<8; ++i)
	{
		pixels[(NB_BIT * index) + i] = (pixels[(NB_BIT * index) + i] & ~(1<<voie)) | (((green >> (7-i)) & 0x01) << voie);
		pixels[(NB_BIT * index) + i + 8] = (pixels[(NB_BIT * index) + i + 8] & ~(1<<voie)) | (((red >> (7-i)) & 0x01) << voie);
		pixels[(NB_BIT * index) + i + 16] = (pixels[(NB_BIT * index) + i + 16] & ~(1<<voie)) | (((blue >> (7-i)) & 0x01) << voie);
	}
}
